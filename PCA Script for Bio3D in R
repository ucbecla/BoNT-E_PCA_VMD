#Load libraries for the script.

library(ggplot2)
library(grid)
library(plyr)
library(dplyr)
library(gridExtra)
library(extrafont)
library(bio3d)
library(parallel)
library(fastcluster)
library(factoextra)

#Set the working directory for the analysis.

setwd("/home/ucbecla/Scratch")

#Split the analysis of some components over several cores. Can be commented out if not necessary.

setup.ncore(36)
cl <- makeForkCluster(nnodes = 36)

#Read in your DCD trajectory and associated PDB file (must have the same number of atoms).

trj <- read.dcd("Trajectory.dcd")
pdb <- read.pdb("Protein.pdb")

#Select only the carbon-alpha atoms, reduces computational cost.

ca.inds <- atom.select(pdb, "calpha")

#Create a 3-dimensional matrix which stores the coordinates of every frame,
#And split among number of cores determined previously (can be removed if not necessary).
xyz <- fit.xyz(fixed = pdb$xyz, mobile = trj, fixed.inds = ca.inds$xyz, mobile.inds = ca.inds$xyz, ncore = 36, nseg.scale = 36)

#Save this matrix as an R Object file, if you want to load it up later,
#Saves you having to run the "fit.xyz" command for every new repeat of the same trajectory.

save(trj, file = "Trajectory.RData")

#Remove the "trj" object from this session, it is no longer used.
#This saves RAM for the rest of the analysis.

rm(trj)

#Measure the Radius of gyration of your object for every frame
#stored in the matrix. And write it out in a text file, then remove from memory.

Rg <- rgyr(xyz, ncore = 36, nseg.scale = 36)
write.table(Rg, "Rg.txt", sep="\t")
rm(Rg)

#Measure RMSF of your protein; write it out in a text file, then remove from memory.

rmsf <- rmsf(xyz)
write.table(rmsf, "RMSF.txt", sep="\t")
rm(rmsf)

#Measure RMSD of your protein with respect to a frame of reference.
# a is the reference structure; b is the trajectory matrix.
#Each frame is superposed to the reference to minimise RMSD.
#Write out data and remove object.

rmsd <- rmsd(a=pdb, b=xyz, a.inds=ca.inds$xyz, b.inds=ca.inds$xyz, fit=TRUE, ncore=36, nseg.scale=36)
write.table(rmsd, "RMSD.txt", sep="\t")
rm(rmsd)

#Save the XYZ matrix as an R Object file.

save(xyz, file = "XYZ.RData")

#Perform the PCA analysis.

pc <- pca.xyz(xyz[, ca.inds$xyz], mass = pdb)

#Remove the matrix object from memory to save RAM.

rm(xyz)

#Save the PCA object as an R Object file.

save(pc, file = "PCA.RData")

#Get the Elbow plot of your PCA. This helps determine the number of clusters to use.

k <- list()
for(i in 1:10){      #Number of clusters e.g. 1 to 10
  k[[i]] <- kmeans(pc$z, i) 
}

betweenss_totss <- list()
for(i in 1:10){
  betweenss_totss[[i]] <- k[[i]]$betweenss/k[[i]]$totss
}

tiff("Elbow.tif", width=7, height=7, units="in", res=1200)
plot(1:10, betweenss_totss, type = "b", ylab = "Between SS / Total SS", xlab = "Clusters (k)")

dev.off()

#Comment out everything after here for first run; then use determined number of clusters in this 2nd half.

#Do the clustering using hierarchical clustering. "Average" method is quoted as the best for MD frames.

hc <- hclust(dist(pc$z[, 1:2]), method = "average")

#Change type of object hc is. This is useful for plotting the dendrogram later.
#Save the dendrogram object as an R Object file to load it later.

dend = as.dendrogram(hc)
save(hc, file = "HC.RData")
save(dend, file = "Dendrogram.RData")

#Set the number of clusters (k) to use as determined by elbow plot.
#Save the clustering as a text file. This gives you frame number vs cluster number in 2 columns.
#Then remove unnecessary objects from memory.

grps <- cutree(hc, k = 4)
write.table(grps, "Clusters.txt", sep="\t")
rm(hc)
rm(dend)

#Get the mid-point of each cluster. This is the closest structure to every other in that cluster.

get_mid <- function(z, clust){
    mid_clust <- colMeans(z[grps == clust,1:2])
    rel <- z[grps == clust,1:2] - mid_clust
    frame <- which(sqrt(rel[,1]**2+rel[,1]**2) ==  min(sqrt(rel[,1]**2+rel[,1]**2)))
    frame <- which(sqrt(rel[,1]**2+rel[,1]**2) %in%  min(sqrt(rel[,1]**2+rel[,1]**2)))[1]
    mid_rep <- z[grps == clust,1:2][frame,]
    rep_frame <- which(z[,1:2] == mid_rep)[1]
    rep_frame <- which(z[,1:2] %in% mid_rep)[1]
    return(rep_frame)
}

#Reduce or increase to the number of clusters you are using.

mid_c1 <- get_mid(pc$z,1)
print(mid_c1)
mid_c2 <- get_mid(pc$z,2)
print(mid_c2)
mid_c3 <- get_mid(pc$z,3)
print(mid_c3)
mid_c4 <- get_mid(pc$z,4)
print(mid_c4)
mid_c5 <- get_mid(pc$z,5)
print(mid_c5)
mid_c6 <- get_mid(pc$z,6)
print(mid_c6)

stopCluster(cl)
